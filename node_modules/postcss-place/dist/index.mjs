import postcss from 'postcss';
import { parse } from 'postcss-values-parser';

var options = {
  /** Whether to preserve the original place value. */
  preserve: true
};

var onCSSDeclaration = (decl => {
  // alignment
  const alignment = decl.prop.match(placeMatch)[1]; // value ast and child nodes

  const value = parse(decl.value);
  let alignmentValues = [];
  value.walkWords(walk => {
    alignmentValues.push(walk.parent.type === 'root' ? walk.toString() : walk.parent.toString());
  });
  decl.cloneBefore({
    prop: `align-${alignment}`,
    value: alignmentValues[0]
  });
  decl.cloneBefore({
    prop: `justify-${alignment}`,
    value: alignmentValues[1] || alignmentValues[0]
  }); // conditionally remove place-[alignment]

  if (!options.preserve) {
    decl.remove();
  }
});
const placeMatch = /^place-(content|items|self)/;

var index = postcss.plugin('postcss-place', opts => {
  // prepare options
  if ('preserve' in Object(opts)) options.preserve = Boolean(opts.preserve);
  return root => {
    // walk each matching declaration
    root.walkDecls(placeMatch, onCSSDeclaration);
  };
});

export default index;
